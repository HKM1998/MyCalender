package com.kosmo.mycalender.user.controller;

import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.springframework.validation.Errors;
import org.springframework.validation.ValidationUtils;
import org.springframework.validation.Validator;

import spring.RegisterRequest;

public class UserRegistValidator implements Validator{
	private static final String emailRegExp =
			"^[_A-Za-z0-9-\\+]+(\\.[_A-Za-z0-9-]+)*@" +
			"[A-Za-z0-9-]+(\\.[A-Za-z0-9])*(\\.[A-Za-z]{2,})$";
	private Pattern pattern;

	public UserRegistValidator() {
		pattern = Pattern.compile(emailRegExp);
	}
	
	@Override
	public boolean supports(Class<?> clazz) {
		// 파라미터 clazz 객체가 RegisterRequest 로 변환 가능한지 확인
		// 스프링 MVC 에서 확인 하므로 코드 작성에 유의 해야함
		return RegisterRequest.class.isAssignableFrom(clazz);
	}

	@Override
	public void validate(Object target, Errors errors) {
		// target 대상객체, errors 는 검사결과 에러 코드 설정
		RegisterRequest regReq = (RegisterRequest) target;
		if(regReq.getEmail() == null || regReq.getEmail().trim().isEmpty()) {
			errors.rejectValue("email", "required");
		} else {
			// 정규식 매칭이 되지 않으면 bad 코드
			Matcher matcher = pattern.matcher(regReq.getEmail());
			if(!matcher.matches()) {
				errors.rejectValue("email", "bad");
			}
		}
		// 검사 대상 객체의 name 프로퍼티가 null 이거나 공백 문자열인 경우 에러코드 추가
		ValidationUtils.rejectIfEmptyOrWhitespace(errors, "name", "required");
		// 검사 대상 객체의 비밀번호/확인 프로퍼티가 null 인 경우 에러코드 추가
		ValidationUtils.rejectIfEmpty(errors, "password", "required");
		ValidationUtils.rejectIfEmpty(errors, "confirmPassword", "required");
		if(!regReq.getPassword().isEmpty()) {
			if(!regReq.isPasswordEqualToConfirmPassword()) {
				errors.rejectValue("confirmPassword", "notmatch");
			}
		}
	}

}
